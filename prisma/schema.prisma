generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())

  admin_of Room[] @relation("Admin")
  rooms    Room[] @relation("Participants")

  accounts Account[]
  sessions Session[]

  Authenticator Authenticator[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shape {
  id    String @id @default(uuid())
  shape String

  roomId String
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Link {
  id   Int    @id @default(autoincrement())
  link String @unique

  roomId String @unique
  room   Room   @relation("Links", fields: [roomId], references: [id], onDelete: Cascade)
}

model Room {
  id         String   @id @default(uuid())
  slug       String   @unique
  created_at DateTime @default(now())

  adminId String
  admin   User   @relation("Admin", fields: [adminId], references: [id], onDelete: Cascade)

  link Link? @relation("Links")

  user User[] @relation("Participants")

  shapes Shape[]
}
